/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define DEF_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 19 18 17 16 15 23 24 25 29 28 27 26>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <4 3 2 1 0 10 11 12 13 14 22 21 20 26 27 28 29>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hroa: hroa {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&kp>, <&open_angle_quote>;

            hold-trigger-key-positions = <5 6 7 8 9 19 18 17 16 15 23 24 25 29 28 27 26>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            label = "HROA";
        };

        hrl: hrl {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 19 18 17 16 15 23 24 25 29 28 27 26>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            label = "HRL";
        };

        grave: grave {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE";
            bindings = <&kp RA(S)>, <&kp RA(S)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        acute: acute {
            compatible = "zmk,behavior-mod-morph";
            label = "ACUTE";
            bindings = <&kp RA(F)>, <&kp RA(F)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        flex: flex {
            compatible = "zmk,behavior-mod-morph";
            label = "FLEX";
            bindings = <&kp RA(X)>, <&kp RA(X)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        diaeresis: diaeresis {
            compatible = "zmk,behavior-mod-morph";
            label = "DIAERESIS";
            bindings = <&kp RA(G)>, <&kp RA(G)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        cb_z {
            bindings = <&kp Z>;
            key-positions = <11 20>;
        };

        cb_b {
            bindings = <&kp B>;
            key-positions = <13 22>;
        };

        cb_dot {
            bindings = <&kp N>;
            key-positions = <16 23>;
        };

        cb_k {
            bindings = <&kp SLASH>;
            key-positions = <18 25>;
        };

        cz {
            bindings = <&kp Z>;
            key-positions = <20 21>;
        };

        cb {
            bindings = <&kp B>;
            key-positions = <22 21>;
        };

        cdot {
            bindings = <&kp N>;
            key-positions = <23 24>;
        };

        ck {
            bindings = <&kp SLASH>;
            key-positions = <25 24>;
        };

        studio_unlock {
            bindings = <&studio_unlock>;
            key-positions = <26 27 28 29>;
        };
    };

    macros {
        open_angle_quote: open_angle_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_2) &kp LS(SPACE)>;
            label = "OPEN_ANGLE_QUOTE";
        };

        closed_angle_quote: closed_angle_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(SPACE) &kp LS(NUMBER_3)>;
            label = "CLOSED_ANGLE_QUOTE";
        };

        egrave: egrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&grave &kp K>;
            label = "EGRAVE";
        };

        agrave: agrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&grave &kp A>;
            label = "AGRAVE";
        };

        ugrave: ugrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&grave &kp I>;
            label = "UGRAVE";
        };

        eacute: eacute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&acute &kp I>;
            label = "EACUTE";
        };

        eflex: eflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&flex &kp K>;
            label = "EFLEX";
        };

        aflex: aflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&flex &kp A>;
            label = "AFLEX";
        };

        uflex: uflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&flex &kp I>;
            label = "UFLEX";
        };

        iflex: iflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&flex &kp L>;
            label = "IFLEX";
        };

        oflex: oflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&flex &kp SEMICOLON>;
            label = "OFLEX";
        };

        ediaeresis: ediaeresis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&diaeresis &kp K>;
            label = "Ediaeresis";
        };

        udiaeresis: udiaeresis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&diaeresis &kp I>;
            label = "Udiaeresis";
        };

        idiaeresis: idiaeresis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&diaeresis &kp L>;
            label = "Idiaeresis";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W        &kp E         &kp R         &kp T                &kp Y                 &kp U         &kp I            &kp O        &kp P
&hml LGUI A  &hml RALT S  &hml LCTRL D  &hml LSHFT F  &kp G                &kp H                 &hmr RSHFT J  &hmr RCTRL K     &hmr RALT L  &hmr RGUI SEMICOLON
             &kp X        &hml LALT C   &hrl 4 V                                                 &hrl 5 M      &hmr LALT COMMA  &kp DOT
                                        &lt 1 SPACE   &mt RIGHT_ALT TAB    &mt LEFT_SHIFT ENTER  &lt 2 BSPC
            >;
        };

        nav_layer {
            display-name = "Nav";
            bindings = <
&egrave  &trans  &trans             &kp RA(SEMICOLON)      &trans       &kp HOME  &kp PAGE_DOWN  &kp PG_UP     &kp END    &kp PRINTSCREEN
&trans   &trans  &hml LCTRL ESCAPE  &hml LEFT_SHIFT LC(B)  &kp RA(T)    &kp LEFT  &kp DOWN       &kp UP_ARROW  &kp RIGHT  &kp CAPS
         &kp Z   &trans             &kp B                                         &kp N          &trans        &kp SLASH
                                    &trans                 &trans       &trans    &lt 2 DELETE
            >;
        };

        num_layer {
            display-name = "NUMERIC";
            bindings = <
&kp F1  &kp F2      &kp F3        &kp F4               &kp F5     &kp F6   &kp F7   &kp F8        &kp F9  &kp F10
&kp N1  &kp N2      &kp N3        &kp N4               &kp N5     &kp N6   &kp N7   &kp N8        &kp N9  &kp N0
        &kp LS(N1)  &hroa LALT 0  &closed_angle_quote                      &kp N8   &hmr LALT N9  &kp N0
                                  &lt 1 F11            &kp F12    &kp F11  &kp F12
            >;
        };

        Media {
            display-name = "Media";
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans             &trans      &trans           &trans
&trans  &trans  &trans  &trans  &trans    &trans  &kp C_VOLUME_DOWN  &kp C_MUTE  &kp C_VOLUME_UP  &trans
        &trans  &trans  &trans                    &trans             &trans      &trans
                        &trans  &trans    &trans  &trans
            >;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans          &msc SCRL_LEFT  &msc SCRL_RIGHT  &trans           &trans
&trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP     &mmv MOVE_RIGHT  &mkp MCLK
        &trans  &trans  &trans                            &msc SCRL_DOWN  &msc SCRL_UP     &trans
                        &trans  &trans    &mkp RCLK       &mkp LCLK
            >;
        };

        typo {
            bindings = <
&aflex   &trans   &trans   &trans  &trans    &trans  &trans  &trans  &trans       &uflex
&agrave  &eacute  &egrave  &eflex  &trans    &trans  &trans  &iflex  &idiaeresis  &ugrave
         &trans   &trans   &trans                    &trans  &trans  &trans
                           &trans  &trans    &trans  &trans
            >;
        };

        backup_default {
            bindings = <
&kp Q        &kp W        &kp E         &kp R         &kp T                &kp Y                 &kp U         &kp I            &kp O        &kp P
&hml LGUI A  &hml RALT S  &hml LCTRL D  &hml LSHFT F  &kp G                &kp H                 &hmr RSHFT J  &hmr RCTRL K     &hmr RALT L  &hmr RGUI SEMICOLON
             &kp X        &hml LALT C   &hrl 4 V                                                 &hrl 5 M      &hmr LALT COMMA  &kp DOT
                                        &lt 1 SPACE   &mt RIGHT_ALT TAB    &mt LEFT_SHIFT ENTER  &lt 2 BSPC
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        MediaLayer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
